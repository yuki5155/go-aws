AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sample-app

  Sample SAM Template for sample-app
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stg
      - prd
    Description: Environment name

  CustomDomainName:
    Type: String
    Description: Custom domain name

  HostedZoneId:
    Type: String
    Description: Hosted zone ID

  CertificateArn:
    Type: String
    Description: ARN of existing ACM certificate

  CookieDomain:
    Type: String
    Description: Cookie domain
    Default: ''

  AllowOrigin:
    Type: String
    Description: CORS allow origin
    Default: 'https://mydevportal.com'

  CognitoDomain:
    Type: String
    Description: Cognito domain name
    Default: ''

  CognitoClientID:
    Type: String
    Description: Cognito app client ID
    Default: ''

  CognitoClientSecret:
    Type: String
    Description: Cognito app client secret
    Default: ''

  CognitoUserPoolID:
    Type: String
    Description: Cognito user pool ID
    Default: ''

  CognitoCallbackURL:
    Type: String
    Description: Cognito callback URL
    Default: ''

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Tracing: Active

Resources:
  # API Gateway定義
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # ダミーステージ名を使用
      StageName: dummy
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      BinaryMediaTypes:
        - '*/*'
      # Open API定義を使用して詳細に設定
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Sub "Sample API - ${Environment}"
        paths:
          /hello:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                "200":
                  description: "200 response"
          /hello-post:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldPostFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                "200":
                  description: "200 response"
          /callback:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CallbackFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                "200":
                  description: "200 response"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
              # MOCKインテグレーションを使用して直接APIゲートウェイでOPTIONSを処理
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !Sub "'${AllowOrigin}'"
                      method.response.header.Access-Control-Allow-Credentials: "'true'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

  # 明示的なステージとデプロイメント
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGateway
    Properties:
      RestApiId: !Ref ApiGateway
      Description: "API Gateway Deployment"

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref ApiGateway
      StageName: !Sub "${Environment}-v4"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO

  # Custom domain
  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref CustomDomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  # Base path mapping
  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ApiStage
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref ApiGateway
      Stage: !Sub "${Environment}-v4"
      BasePath: api

  # DNS A Record
  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref CustomDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: hello-world/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Environment:
        Variables:
          GOCACHE: /tmp/.cache/go-build
          GOPATH: /tmp/go
          COOKIE_DOMAIN: !Ref CookieDomain
          ALLOW_ORIGIN: !Ref AllowOrigin
          
  HelloWorldPostFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: hello-world-post/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Environment:
        Variables:
          GOCACHE: /tmp/.cache/go-build
          GOPATH: /tmp/go
          COOKIE_DOMAIN: !Ref CookieDomain
          ALLOW_ORIGIN: !Ref AllowOrigin

  CallbackFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: callback/
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - x86_64
      Environment:
        Variables:
          GOCACHE: /tmp/.cache/go-build
          GOPATH: /tmp/go
          COOKIE_DOMAIN: !Ref CookieDomain
          ALLOW_ORIGIN: !Ref AllowOrigin
          COGNITO_DOMAIN: !Ref CognitoDomain
          COGNITO_CLIENT_ID: !Ref CognitoClientID
          COGNITO_CLIENT_SECRET: !Ref CognitoClientSecret
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolID
          COGNITO_CALLBACK_URL: !Ref CognitoCallbackURL

  # Lambda実行権限
  HelloWorldPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/hello

  HelloWorldPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloWorldPostFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/hello-post

  CallbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallbackFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/callback

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}-v4/

  CustomDomainUrl:
    Description: Custom domain URL
    Value: !Sub https://${CustomDomainName}/api/

  ApiGatewayRestApiId:
    Description: API Gateway REST API ID
    Value: !Ref ApiGateway

  ApiGatewayRestApiStage:
    Description: API Gateway REST API Stage
    Value: !Sub "${Environment}-v4"